<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/PPRevealSideViewController.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/PPRevealSideViewController</TokenIdentifier>
			<Abstract type="html">Allow pushing controllers on side views.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>
			
			<NodeRef refid="1"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/setRootViewController:</TokenIdentifier>
			<Abstract type="html">Getter for the rootViewController</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) UIViewController *rootViewController</Declaration>
			
			
			<Anchor>//api/name/rootViewController</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/rootViewController</TokenIdentifier>
			<Abstract type="html">Getter for the rootViewController</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly, retain) UIViewController *rootViewController</Declaration>
			
			
			<Anchor>//api/name/rootViewController</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/setOptions:</TokenIdentifier>
			<Abstract type="html">The Reveal options. Possible values are :</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) PPRevealSideOptions options</Declaration>
			
			
			<Anchor>//api/name/options</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/options</TokenIdentifier>
			<Abstract type="html">The Reveal options. Possible values are :</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) PPRevealSideOptions options</Declaration>
			
			
			<Anchor>//api/name/options</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/setBouncingOffset:</TokenIdentifier>
			<Abstract type="html">The offset bouncing.
When opening, if set to -1.0, then the animation will bounce with a default offset
When closing, if set to -1.0, then the animation open completely before closing.
Set to -1.0 by default</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat bouncingOffset</Declaration>
			
			
			<Anchor>//api/name/bouncingOffset</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/bouncingOffset</TokenIdentifier>
			<Abstract type="html">The offset bouncing.
When opening, if set to -1.0, then the animation will bounce with a default offset
When closing, if set to -1.0, then the animation open completely before closing.
Set to -1.0 by default</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) CGFloat bouncingOffset</Declaration>
			
			
			<Anchor>//api/name/bouncingOffset</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/setPanInteractionsWhenClosed:</TokenIdentifier>
			<Abstract type="html">For panning gestures
Define the interactions to display the side views when closed. By default, only the navigation bar is enabled
Possible values are :</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/panInteractionsWhenOpened</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/tapInteractionsWhenOpened</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, assign) PPRevealSideInteractions panInteractionsWhenClosed</Declaration>
			
			
			<Anchor>//api/name/panInteractionsWhenClosed</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/panInteractionsWhenClosed</TokenIdentifier>
			<Abstract type="html">For panning gestures
Define the interactions to display the side views when closed. By default, only the navigation bar is enabled
Possible values are :</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/panInteractionsWhenOpened</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/tapInteractionsWhenOpened</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, assign) PPRevealSideInteractions panInteractionsWhenClosed</Declaration>
			
			
			<Anchor>//api/name/panInteractionsWhenClosed</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/setPanInteractionsWhenOpened:</TokenIdentifier>
			<Abstract type="html">For panning gestures
Define the interactions to close the side view when opened. By default, all the view is enabled</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/panInteractionsWhenClosed</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/tapInteractionsWhenOpened</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, assign) PPRevealSideInteractions panInteractionsWhenOpened</Declaration>
			
			
			<Anchor>//api/name/panInteractionsWhenOpened</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/panInteractionsWhenOpened</TokenIdentifier>
			<Abstract type="html">For panning gestures
Define the interactions to close the side view when opened. By default, all the view is enabled</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/panInteractionsWhenClosed</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/tapInteractionsWhenOpened</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, assign) PPRevealSideInteractions panInteractionsWhenOpened</Declaration>
			
			
			<Anchor>//api/name/panInteractionsWhenOpened</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/setTapInteractionsWhenOpened:</TokenIdentifier>
			<Abstract type="html">For tapping gestures
Define the interactions to close the side view when opened. By default, all the view is enabled</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/panInteractionsWhenClosed</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/panInteractionsWhenOpened</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, assign) PPRevealSideInteractions tapInteractionsWhenOpened</Declaration>
			
			
			<Anchor>//api/name/tapInteractionsWhenOpened</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/tapInteractionsWhenOpened</TokenIdentifier>
			<Abstract type="html">For tapping gestures
Define the interactions to close the side view when opened. By default, all the view is enabled</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/panInteractionsWhenClosed</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/panInteractionsWhenOpened</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>@property (nonatomic, assign) PPRevealSideInteractions tapInteractionsWhenOpened</Declaration>
			
			
			<Anchor>//api/name/tapInteractionsWhenOpened</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/setDirectionsToShowBounce:</TokenIdentifier>
			<Abstract type="html">Define the side you want them to bounce if there is no controller. By default, all the side are enabled</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) PPRevealSideDirection directionsToShowBounce</Declaration>
			
			
			<Anchor>//api/name/directionsToShowBounce</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/directionsToShowBounce</TokenIdentifier>
			<Abstract type="html">Define the side you want them to bounce if there is no controller. By default, all the side are enabled</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) PPRevealSideDirection directionsToShowBounce</Declaration>
			
			
			<Anchor>//api/name/directionsToShowBounce</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/setDelegate:</TokenIdentifier>
			<Abstract type="html">The delegate which will receive events from the controller. See PPRevealSideViewControllerDelegate for more informations.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) id&lt;PPRevealSideViewControllerDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/PPRevealSideViewController/delegate</TokenIdentifier>
			<Abstract type="html">The delegate which will receive events from the controller. See PPRevealSideViewControllerDelegate for more informations.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, assign) id&lt;PPRevealSideViewControllerDelegate&gt; delegate</Declaration>
			
			
			<Anchor>//api/name/delegate</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/initWithRootViewController:</TokenIdentifier>
			<Abstract type="html">Initialize the reveal controller with a rootViewController. This rootViewController will be in the center.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>- (id)initWithRootViewController:(UIViewController *)rootViewController</Declaration>
			<Parameters>
				<Parameter>
					<Name>rootViewController</Name>
					<Abstract type="html">The center view controller.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">the controller initialized</Abstract></ReturnValue>
			<Anchor>//api/name/initWithRootViewController:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:animated:</TokenIdentifier>
			<Abstract type="html">Same as below, but without completionBlock for backward compatibility</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:animated:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)pushViewController:(UIViewController *)controller onDirection:(PPRevealSideDirection)direction animated:(BOOL)animated</Declaration>
			
			
			<Anchor>//api/name/pushViewController:onDirection:animated:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:animated:completion:</TokenIdentifier>
			<Abstract type="html">Push controller with a direction and a default offset.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:withOffset:animated:completion:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:animated:forceToPopPush:completion:</TokenIdentifier>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushOldViewControllerOnDirection:animated:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)pushViewController:(UIViewController *)controller onDirection:(PPRevealSideDirection)direction animated:(BOOL)animated completion:(void ( ^ ) ( ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>controller</Name>
					<Abstract type="html">The controller to push</Abstract>
				</Parameter><Parameter>
					<Name>direction</Name>
					<Abstract type="html">This parameter allows you to choose the direction to push the controller</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Animated or not</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block that would be called after animation completed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/pushViewController:onDirection:animated:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:animated:forceToPopPush:</TokenIdentifier>
			<Abstract type="html">Same as below, but without completionBlock for backward compatibility</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:animated:forceToPopPush:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)pushViewController:(UIViewController *)controller onDirection:(PPRevealSideDirection)direction animated:(BOOL)animated forceToPopPush:(BOOL)forcePopPush</Declaration>
			
			
			<Anchor>//api/name/pushViewController:onDirection:animated:forceToPopPush:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:animated:forceToPopPush:completion:</TokenIdentifier>
			<Abstract type="html">Push controller with a direction and a default offset and force to pop then push.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:withOffset:animated:forceToPopPush:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)pushViewController:(UIViewController *)controller onDirection:(PPRevealSideDirection)direction animated:(BOOL)animated forceToPopPush:(BOOL)forcePopPush completion:(void ( ^ ) ( ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>controller</Name>
					<Abstract type="html">The controller to push</Abstract>
				</Parameter><Parameter>
					<Name>direction</Name>
					<Abstract type="html">This parameter allows you to choose the direction to push the controller</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Animated or not</Abstract>
				</Parameter><Parameter>
					<Name>forcePopPush</Name>
					<Abstract type="html">This parameter is needed when you want to push a new controller in the same direction.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block that would be called after animation completed
For example, you could push a new left controller from the left. In this case, setting forcePopPush to YES will pop to center view controller, then push the new controller.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/pushViewController:onDirection:animated:forceToPopPush:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:withOffset:animated:</TokenIdentifier>
			<Abstract type="html">Same as below, but without completionBlock for backward compatibility</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:withOffset:animated:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)pushViewController:(UIViewController *)controller onDirection:(PPRevealSideDirection)direction withOffset:(CGFloat)offset animated:(BOOL)animated</Declaration>
			
			
			<Anchor>//api/name/pushViewController:onDirection:withOffset:animated:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:withOffset:animated:completion:</TokenIdentifier>
			<Abstract type="html">Same as pushViewController:onDirection:animated: but with an offset</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>- (void)pushViewController:(UIViewController *)controller onDirection:(PPRevealSideDirection)direction withOffset:(CGFloat)offset animated:(BOOL)animated completion:(void ( ^ ) ( ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>controller</Name>
					<Abstract type="html">The controller to push</Abstract>
				</Parameter><Parameter>
					<Name>direction</Name>
					<Abstract type="html">The direction of the push</Abstract>
				</Parameter><Parameter>
					<Name>offset</Name>
					<Abstract type="html">The offset when the side view is pushed</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Animated or not</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block that would be called after animation completed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/pushViewController:onDirection:withOffset:animated:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:withOffset:animated:forceToPopPush:</TokenIdentifier>
			<Abstract type="html">Same as below, but without completionBlock for backward compatibility</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:withOffset:animated:forceToPopPush:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)pushViewController:(UIViewController *)controller onDirection:(PPRevealSideDirection)direction withOffset:(CGFloat)offset animated:(BOOL)animated forceToPopPush:(BOOL)forcePopPush</Declaration>
			
			
			<Anchor>//api/name/pushViewController:onDirection:withOffset:animated:forceToPopPush:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushViewController:onDirection:withOffset:animated:forceToPopPush:completion:</TokenIdentifier>
			<Abstract type="html">Same as pushViewController:onDirection:animated:forceToPopPush: but with an offset</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>- (void)pushViewController:(UIViewController *)controller onDirection:(PPRevealSideDirection)direction withOffset:(CGFloat)offset animated:(BOOL)animated forceToPopPush:(BOOL)forcePopPush completion:(void ( ^ ) ( ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>controller</Name>
					<Abstract type="html">The controller to push</Abstract>
				</Parameter><Parameter>
					<Name>direction</Name>
					<Abstract type="html">This parameter allows you to choose the direction to push the controller</Abstract>
				</Parameter><Parameter>
					<Name>offset</Name>
					<Abstract type="html">The offset when the side view is pushed</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Animated or not</Abstract>
				</Parameter><Parameter>
					<Name>forcePopPush</Name>
					<Abstract type="html">This parameter is needed when you want to push a new controller in the same direction.</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block that would be called after animation completed
For example, you could push a new left controller from the left. In this case, setting forcePopPush to YES will pop to center view controller, then push the new controller.</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/pushViewController:onDirection:withOffset:animated:forceToPopPush:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushOldViewControllerOnDirection:animated:</TokenIdentifier>
			<Abstract type="html">Same as below, but without completionBlock for backward compatibility</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushOldViewControllerOnDirection:animated:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)pushOldViewControllerOnDirection:(PPRevealSideDirection)direction animated:(BOOL)animated</Declaration>
			
			
			<Anchor>//api/name/pushOldViewControllerOnDirection:animated:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushOldViewControllerOnDirection:animated:completion:</TokenIdentifier>
			<Abstract type="html">Push the old controller if exists for the direction with a default offset.
This allows you for example to go directly on an another side from a controller in a side.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushOldViewControllerOnDirection:withOffset:animated:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)pushOldViewControllerOnDirection:(PPRevealSideDirection)direction animated:(BOOL)animated completion:(void ( ^ ) ( ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>direction</Name>
					<Abstract type="html">The direction</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Animated or not</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block that would be called after animation completed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/pushOldViewControllerOnDirection:animated:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushOldViewControllerOnDirection:withOffset:animated:</TokenIdentifier>
			<Abstract type="html">Same as below, but without completionBlock for backward compatibility</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushOldViewControllerOnDirection:withOffset:animated:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)pushOldViewControllerOnDirection:(PPRevealSideDirection)direction withOffset:(CGFloat)offset animated:(BOOL)animated</Declaration>
			
			
			<Anchor>//api/name/pushOldViewControllerOnDirection:withOffset:animated:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/pushOldViewControllerOnDirection:withOffset:animated:completion:</TokenIdentifier>
			<Abstract type="html">Same as pushOldViewControllerOnDirection:animated: but with an offset</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>- (void)pushOldViewControllerOnDirection:(PPRevealSideDirection)direction withOffset:(CGFloat)offset animated:(BOOL)animated completion:(void ( ^ ) ( ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>direction</Name>
					<Abstract type="html">The direction</Abstract>
				</Parameter><Parameter>
					<Name>offset</Name>
					<Abstract type="html">The offset when the side view is pushed</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Animated or not</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block that would be called after animation completed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/pushOldViewControllerOnDirection:withOffset:animated:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/popViewControllerWithNewCenterController:animated:</TokenIdentifier>
			<Abstract type="html">Same as below, but without completionBlock for backward compatibility</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/popViewControllerWithNewCenterController:animated:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)popViewControllerWithNewCenterController:(UIViewController *)centerController animated:(BOOL)animated</Declaration>
			
			
			<Anchor>//api/name/popViewControllerWithNewCenterController:animated:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/popViewControllerWithNewCenterController:animated:completion:</TokenIdentifier>
			<Abstract type="html">Pop controller with a new Center controller.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/popViewControllerAnimated:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)popViewControllerWithNewCenterController:(UIViewController *)centerController animated:(BOOL)animated completion:(void ( ^ ) ( ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>centerController</Name>
					<Abstract type="html">The new center controller</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Animated or not</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block that would be called after animation completed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/popViewControllerWithNewCenterController:animated:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/popViewControllerAnimated:</TokenIdentifier>
			<Abstract type="html">Same as below, but without completionBlock for backward compatibility</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/popViewControllerAnimated:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)popViewControllerAnimated:(BOOL)animated</Declaration>
			
			
			<Anchor>//api/name/popViewControllerAnimated:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/popViewControllerAnimated:completion:</TokenIdentifier>
			<Abstract type="html">Go back to the center controller.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/popViewControllerWithNewCenterController:animated:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)popViewControllerAnimated:(BOOL)animated completion:(void ( ^ ) ( ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>animated</Name>
					<Abstract type="html">Animated or not</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block that would be called after animation completed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/popViewControllerAnimated:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/openCompletelySide:animated:</TokenIdentifier>
			<Abstract type="html">Same as below, but without completionBlock for backward compatibility</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/openCompletelySide:animated:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)openCompletelySide:(PPRevealSideDirection)direction animated:(BOOL)animated</Declaration>
			
			
			<Anchor>//api/name/openCompletelySide:animated:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/openCompletelySide:animated:completion:</TokenIdentifier>
			<Abstract type="html">Open completely the side</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>- (void)openCompletelySide:(PPRevealSideDirection)direction animated:(BOOL)animated completion:(void ( ^ ) ( ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>direction</Name>
					<Abstract type="html">The direction to open the side completely</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Animated or not</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block that would be called after animation completed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/openCompletelySide:animated:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/openCompletelyAnimated:</TokenIdentifier>
			<Abstract type="html">Same as below, but without completionBlock for backward compatibility</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/openCompletelyAnimated:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)openCompletelyAnimated:(BOOL)animated</Declaration>
			
			
			<Anchor>//api/name/openCompletelyAnimated:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/openCompletelyAnimated:completion:</TokenIdentifier>
			<Abstract type="html">Open completely the current side semi opened</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/openCompletelySide:animated:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)openCompletelyAnimated:(BOOL)animated completion:(void ( ^ ) ( ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>animated</Name>
					<Abstract type="html">Animated or not</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block that would be called after animation completed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/openCompletelyAnimated:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/replaceAfterOpenedCompletelyAnimated:</TokenIdentifier>
			<Abstract type="html">Same as below, but without completionBlock for backward compatibility</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/replaceAfterOpenedCompletelyAnimated:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)replaceAfterOpenedCompletelyAnimated:(BOOL)animated</Declaration>
			
			
			<Anchor>//api/name/replaceAfterOpenedCompletelyAnimated:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/replaceAfterOpenedCompletelyAnimated:completion:</TokenIdentifier>
			<Abstract type="html">Replace the side view with default offset.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/replaceAfterOpenedCompletelyWithOffset:animated:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)replaceAfterOpenedCompletelyAnimated:(BOOL)animated completion:(void ( ^ ) ( ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>animated</Name>
					<Abstract type="html">Animated or not</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block that would be called after animation completed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/replaceAfterOpenedCompletelyAnimated:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/replaceAfterOpenedCompletelyWithOffset:animated:</TokenIdentifier>
			<Abstract type="html">Same as below, but without completionBlock for backward compatibility</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/replaceAfterOpenedCompletelyWithOffset:animated:completion:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)replaceAfterOpenedCompletelyWithOffset:(CGFloat)offset animated:(BOOL)animated</Declaration>
			
			
			<Anchor>//api/name/replaceAfterOpenedCompletelyWithOffset:animated:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/replaceAfterOpenedCompletelyWithOffset:animated:completion:</TokenIdentifier>
			<Abstract type="html">Replace the side view with an offset after it was opened completely. For example, if you hit a search bar, then you will open completely.
If the user cancel, you probably want to replace the like it was before, to complete the cancel stuff.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>- (void)replaceAfterOpenedCompletelyWithOffset:(CGFloat)offset animated:(BOOL)animated completion:(void ( ^ ) ( ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>offset</Name>
					<Abstract type="html">The offset</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Animated or not</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block that would be called after animation completed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/replaceAfterOpenedCompletelyWithOffset:animated:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/replaceCentralViewControllerWithNewController:animated:animationDirection:completion:</TokenIdentifier>
			<Abstract type="html">Replace the central view with complete opening animation. This is useful if you use side view as menu and need to switch central view after some operation without using the menu.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>- (void)replaceCentralViewControllerWithNewController:(UIViewController *)newCenterController animated:(BOOL)animated animationDirection:(PPRevealSideDirection)direction completion:(void ( ^ ) ( ))completionBlock</Declaration>
			<Parameters>
				<Parameter>
					<Name>newCenterController</Name>
					<Abstract type="html">A new controller for central view</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Animated or not</Abstract>
				</Parameter><Parameter>
					<Name>completionBlock</Name>
					<Abstract type="html">Block that would be called after animation completed</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/replaceCentralViewControllerWithNewController:animated:animationDirection:completion:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/preloadViewController:forSide:</TokenIdentifier>
			<Abstract type="html">Preload a controller.
Use only if the animation scratches OR if you want to have gestures on the center view controller without pushing first.
Preloading is not good for performances since it uses RAM for nothing.
Preload long before pushing the controller (ex : in the view did load)
Offset set to Default Offset</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/preloadViewController:forSide:withOffset:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)preloadViewController:(UIViewController *)controller forSide:(PPRevealSideDirection)direction</Declaration>
			<Parameters>
				<Parameter>
					<Name>controller</Name>
					<Abstract type="html">The controller to preload</Abstract>
				</Parameter><Parameter>
					<Name>direction</Name>
					<Abstract type="html">The direction for the future controller</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/preloadViewController:forSide:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/preloadViewController:forSide:withOffset:</TokenIdentifier>
			<Abstract type="html">Same as preloadViewController:forSide: but with an offset.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/changeOffset:forDirection:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)preloadViewController:(UIViewController *)controller forSide:(PPRevealSideDirection)direction withOffset:(CGFloat)offset</Declaration>
			<Parameters>
				<Parameter>
					<Name>controller</Name>
					<Abstract type="html">The controller to preload</Abstract>
				</Parameter><Parameter>
					<Name>direction</Name>
					<Abstract type="html">The direction for the future controller</Abstract>
				</Parameter><Parameter>
					<Name>offset</Name>
					<Abstract type="html">The offset</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/preloadViewController:forSide:withOffset:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/unloadViewControllerForSide:</TokenIdentifier>
			<Abstract type="html">Remove the controller for a direction. This a convenient method when you use for example a Container view controller like Tab bar controller. When you switch from tabs, you probably want some tabs not to have side controllers. In that case, unload in view will disappear of the tab&apos;s controller, then preload on view will appear.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>- (void)unloadViewControllerForSide:(PPRevealSideDirection)direction</Declaration>
			<Parameters>
				<Parameter>
					<Name>direction</Name>
					<Abstract type="html">The direction for which to unload the controller</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/unloadViewControllerForSide:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/changeOffset:forDirection:</TokenIdentifier>
			<Abstract type="html">Change the offset for a direction. Not animated.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/changeOffset:forDirection:animated:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (void)changeOffset:(CGFloat)offset forDirection:(PPRevealSideDirection)direction</Declaration>
			<Parameters>
				<Parameter>
					<Name>offset</Name>
					<Abstract type="html">The offset</Abstract>
				</Parameter><Parameter>
					<Name>direction</Name>
					<Abstract type="html">The direction for which to change the offset</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/changeOffset:forDirection:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/changeOffset:forDirection:animated:</TokenIdentifier>
			<Abstract type="html">Same as - (void) changeOffset:(CGFloat)offset forDirection:(PPRevealSideDirection)direction but animated</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>- (void)changeOffset:(CGFloat)offset forDirection:(PPRevealSideDirection)direction animated:(BOOL)animated</Declaration>
			<Parameters>
				<Parameter>
					<Name>offset</Name>
					<Abstract type="html">The offset</Abstract>
				</Parameter><Parameter>
					<Name>direction</Name>
					<Abstract type="html">The direction for which to change the offset</Abstract>
				</Parameter><Parameter>
					<Name>animated</Name>
					<Abstract type="html">Animated or not</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/changeOffset:forDirection:animated:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/setOption:</TokenIdentifier>
			<Abstract type="html">Set Option.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>- (void)setOption:(PPRevealSideOptions)option</Declaration>
			<Parameters>
				<Parameter>
					<Name>option</Name>
					<Abstract type="html">The option to set</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setOption:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/resetOption:</TokenIdentifier>
			<Abstract type="html">Reset Option.</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>- (void)resetOption:(PPRevealSideOptions)option</Declaration>
			<Parameters>
				<Parameter>
					<Name>option</Name>
					<Abstract type="html">The option to reset</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/resetOption:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/updateViewWhichHandleGestures</TokenIdentifier>
			<Abstract type="html">Update the view with gestures. Should be called for example when used with controllerForGesturesOnPPRevealSideViewController delegate method when using a container controller as the root. For example with a UITabBarController, call this method when the selected controller has been updated</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>- (void)updateViewWhichHandleGestures</Declaration>
			
			
			<Anchor>//api/name/updateViewWhichHandleGestures</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/PPRevealSideViewController/controllerForSide:</TokenIdentifier>
			<Abstract type="html">Get the controller for a side. It is useful when you are for example on the left, and you want to update the right controller. You could use a reference to the root controller but it is more convenient like this.
Please be aware that this getter does asume that you already displayed at least once the controller you are trying to reach, or you preloaded it. It will return nil otherwise !</Abstract>
			<DeclaredIn>PPRevealSideViewController.h</DeclaredIn>			
			
			<Declaration>- (UIViewController *)controllerForSide:(PPRevealSideDirection)side</Declaration>
			<Parameters>
				<Parameter>
					<Name>side</Name>
					<Abstract type="html">The side of the controller you requested</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The controller on the side parameter</Abstract></ReturnValue>
			<Anchor>//api/name/controllerForSide:</Anchor>
		</Token>
		
	</File>
</Tokens>